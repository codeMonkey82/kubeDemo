/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.demo.services.schema;

import com.demo.services.schema.DefaultFourZeroFour;
import com.demo.services.schema.StatusAlpha;
import com.demo.services.schema.StatusAlphaSchema;
import com.demo.services.schema.StatusBeta;
import com.demo.services.schema.StatusGamma;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-19T13:59:14.106+01:00")

@Api(value = "alpha", description = "the alpha API")
public interface AlphaApi {

    @ApiOperation(value = "Posts a new status to the service", nickname = "createStatusAlpha", notes = "", response = StatusAlpha.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "creation complete", response = StatusAlpha.class),
        @ApiResponse(code = 404, message = "Invalid status value", response = DefaultFourZeroFour.class) })
    @RequestMapping(value = "/alpha/status/alpha",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<StatusAlpha> createStatusAlpha(@ApiParam(value = ""  )  @Valid @RequestBody StatusAlphaSchema inStatusAlphaSchema);


    @ApiOperation(value = "Example of a delete request to the service", nickname = "deleteStatusAlpha", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Delete complete"),
        @ApiResponse(code = 404, message = "id not found", response = DefaultFourZeroFour.class) })
    @RequestMapping(value = "/alpha/status/alpha/{statusId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStatusAlpha(@ApiParam(value = "Numeric ID of the status to delete",required=true) @PathVariable("statusId") Integer statusId);


    @ApiOperation(value = "Get service status", nickname = "getStatusAlpha", notes = "Simple get request to retrieve service status", response = StatusAlpha.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = StatusAlpha.class),
        @ApiResponse(code = 404, message = "Not Found", response = DefaultFourZeroFour.class) })
    @RequestMapping(value = "/alpha/status/alpha",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StatusAlpha> getStatusAlpha();


    @ApiOperation(value = "Get service status", nickname = "getStatusBeta", notes = "Simple get request to retrieve beta service status", response = StatusBeta.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = StatusBeta.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = DefaultFourZeroFour.class) })
    @RequestMapping(value = "/alpha/status/beta",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StatusBeta> getStatusBeta();


    @ApiOperation(value = "Get service status", nickname = "getStatusGamma", notes = "Simple get request to retrieve beta service status", response = StatusGamma.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = StatusGamma.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = DefaultFourZeroFour.class) })
    @RequestMapping(value = "/alpha/status/gamma",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StatusGamma> getStatusGamma();


    @ApiOperation(value = "Posts a new status to the service", nickname = "updateStatusAlpha", notes = "", response = StatusAlpha.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "update complete", response = StatusAlpha.class),
        @ApiResponse(code = 201, message = "creation complete", response = StatusAlpha.class),
        @ApiResponse(code = 404, message = "Invalid status value", response = DefaultFourZeroFour.class) })
    @RequestMapping(value = "/alpha/status/alpha/{statusId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<StatusAlpha> updateStatusAlpha(@ApiParam(value = "",required=true) @PathVariable("statusId") Integer statusId,@ApiParam(value = ""  )  @Valid @RequestBody StatusAlphaSchema inStatusAlphaSchema);

}
